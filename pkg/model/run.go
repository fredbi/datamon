/*
 * Copyright Â© 2019 One Concern
 *
 */

package model

import (
	"time"
)

const (
	Version = 1
)

// Category of run declares the kind of run it is.
type Category struct {
	Name        string      `json:"name" yaml:"name"`               // Unique name for the category
	Contributor Contributor `json:"contributor" yaml:"contributor"` // Credentials for who created the category.
	Version     int         `json:"version" yaml:"version"`         // Version of the run Schema.
}

// Run is an unit of computation that is executed. A run consists of multiple stages where each stage
// has a set of container that read in data and generate data.
type Run struct {
	Name        string      `json:"name" yaml:"name"`               // Name for the run
	InstanceID  string      `json:"instanceid" yaml:"instanceid"`   // External ID used for a run. Not guaranteed to be unique.
	RunID       string      `json:"id" yaml:"id"`                   // Internally generated Unique id for an instance of a run. Each time the same Type+Name is run it results in a new ID.
	Timestamp   time.Time   `json:"timestamp" yaml:"timestamp"`     // Timestamp for when the run was created.
	Contributor Contributor `json:"contributor" yaml:"contributor"` // Contributor who created the run.
	Version     int         `json:"version" yaml:"version"`         // Version of the run Schema.
	Engine      RunEngine   `json:"engine" yaml:"engine"`           // Engine details for runs
}

// RunEngine describes the details for the type of Run being executed and a runfile describing the run.
// Example: The yaml file generated by the pipelines tool for argo.
type RunEngine struct {
	RunFile string `json:"runfile" yaml:"runfile"` // Raw file describing the run. Example: A yaml file.
	Type    string `json:"type" yaml:"type"`       // The entity that executes the run.
}

// RunStatus records the final status for a run.
type RunStatus struct {
	Successful bool   `json:"successful" yaml:"successful"` // Successful run set to true if yes.
	Log        string `json:"log" yaml:"log"`               // Log for the final status, can be the entire status as reported by the pipeline engine.
}

// FS captures the details for the filesystem mount of datasets.
type FS struct {
	Context    string `json:"context" yaml:"context"`       // Context for the dataset
	Repo       string `json:"repo" yaml:"repo"`             // Repo for the dataset
	BundleID   string `json:"bundleid" yaml:"bundleid"`     // BundleID to fetch
	Label      string `json:"label" yaml:"label"`           // Label to fetch
	Fuse       bool   `json:"fuse" yaml:"fuse"`             // Fuse mount for the dataset
	Stream     bool   `json:"stream" yaml:"stream"`         // Stream the data in
	VolumeName string `json:"volumename" yaml:"volumename"` // Volume name
}

// Container describes the details for a container in a stage.
type Container struct {
	Image   string `json:"image" yaml:"image"`     // Image name
	ImageID string `json:"imageid" yaml:"imageid"` // Image ID
}

// DataSetIn describes the details for the data set that went into a container.
type DataSetIn struct {
	Timestamp   time.Time `json:"timestamp" yaml:"timestamp"`     // Timestamp for the dataset in
	Stage       string    `json:"stage" yaml:"stage"`             // Stage in which the dataset is used
	StageID     string    `json:"stageid" yaml:"stageid"`         // StageID is a unique id for each instance of a stage.
	Container   string    `json:"container" yaml:"container"`     // Container which using the dataset
	MountPath   string    `json:"mountpath" yaml:"mountpath"`     // Path to mount it to
	Filesystems []FS      `json:"filesystems" yaml:"filesystems"` // Filesystem details
}

// DataSetOut describes the details for the data set generated by a container.
type DataSetOut struct {
	Timestamp   time.Time `json:"timestamp" yaml:"timestamp"`     // Timestamp for the dataset in
	Stage       string    `json:"stage" yaml:"stage"`             // Stage in which the dataset is used
	Container   string    `json:"container" yaml:"container"`     // Container which using the dataset
	MountPath   string    `json:"mountpath" yaml:"mountpath"`     // Path to mount it to
	Filesystems []FS      `json:"filesystems" yaml:"filesystems"` // Filesystem details
}

func parentRunPath(category string, name string, id string) string {
	return "runs/" + category + "/" + name + "/" + id
}
func parentContainerPath(category string, name string, id string, stage string, stageID string, container string) string {
	return parentRunPath(category, name, id) + "/" + stage + "/" + stageID + "/" + container
}

// GetPathToRun returns the path to the descriptor for a Run
func GetPathToRun(category string, name string, id string) string {
	return parentRunPath(category, name, id) + "/run.yaml"
}

// GetPathToCategory returns the path to the descriptor for a Category
func GetPathToCategory(category string) string {
	return "categories/" + category + "/category.yaml"
}

// GetPathToDataSetIn returns the path to the descriptor DataSetIn for a container part of a stage in a run.
func GetPathToDataSetIn(category string, run string, runID string, stage string, stageID string, container string) string {
	return parentContainerPath(category, run, runID, stage, stageID, container) + "/datain.yaml"
}

// GetPathToDataSetOut returns the path to the descriptor DataSetOut for a container part of a stage in a run.
func GetPathToDataSetOut(category string, run string, runID string, stage string, stageID string, container string) string {
	return parentContainerPath(category, run, runID, stage, stageID, container) + "/dataout.yaml"
}

// GetPathToContainer returns the path to the descriptor Container for a container part of a stage in a run.
func GetPathToContainer(category string, run string, runID string, stage string, stageID string, container string) string {
	return parentContainerPath(category, run, runID, stage, stageID, container) + "/container.yaml"
}

// GetPathToRunStatus returns the path to the descriptor RunStatus for a run.
func GetPathToRunStatus(category string, run string, runID string) string {
	return parentRunPath(category, run, runID) + "/runstatus.yaml"
}
