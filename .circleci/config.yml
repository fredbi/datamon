version: 2.1

executors:
  docker_minio:
    working_directory: ~/project
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    docker:
      - image: circleci/golang
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: access-key
          MINIO_SECRET_KEY: secret-key-thing
          MINIO_BROWSER: "off"
          MINIO_DOMAIN: s3.local
          MINIO_HTTP_TRACE: /tmp/minio.log
        command:
          - server
          - data

  # This provides a glibc build
  # TODO(frederic): add builder for alpine and compare
  docker_builder:
    working_directory: ~/project
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    docker:
      - image: circleci/golang

  fuse_tester:
    working_directory: ~/project
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
      GOROOT: /usr/local/go
      GOPATH: /go
    machine:
      image: ubuntu-1604:201903-01

commands:
  install_base:
    steps:
      - run:
          name: Install packages with gcloud SDK installed locally
          command: |
            sudo apt-get update -y --quiet
            sudo apt-get install --quiet lsb-release upx
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
            sudo apt-get update -y --quiet
            sudo apt-get install -y --quiet git build-essential google-cloud-sdk shellcheck zsh

  install_machine:
    steps:
      - run:
          name: install VM dependencies (fuse+recent golang)
          environment:
            GOROOT: /usr/local/go
            GOPATH: /go
          command: |
            GO_VERSION=1.13.5
            CI_USER=$(id -u)
            sudo apt-get install --quiet fuse

            cd /tmp
            wget --no-verbose https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz
            sudo tar -xf go${GO_VERSION}.linux-amd64.tar.gz
            sudo mv /usr/local/go /usr/local/go.old || true
            sudo mv go /usr/local
            sudo mkdir -p ${GOPATH}/pkg ${GOPATH}/bin
            sudo chown -R ${CI_USER} ${GOPATH}
            export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
            go version

  install_kubectl:
    steps:
      - run:
          name: Install prerequisites to drive kubernetes from ci job
          command: |
            sudo apt-get update -y --quiet
            sudo apt-get install --quiet kubectl
            gcloud container clusters get-credentials onec-dev

  install_tools:
    steps:
      - run:
          name: Install go tools for testing
          # update tools to latest release but clear the module cache after install
          # to avoid conflicts with the main go dependencies.
          environment:
            GO111MODULE: 'on'
          command: |
            go get -u gotest.tools/gotestsum@latest
            go get -u github.com/matryer/moq@latest
            go get -u github.com/golangci/golangci-lint/cmd/golangci-lint@latest
            go clean -modcache

  login_to_google:
    steps:
      - run:
          name: Initialize gcloud SDK
          # GCLOUD_SERVICE_KEY is defined as a global environment in circleci for this context
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            echo $GCLOUD_SERVICE_KEY | docker login -u _json_key --password-stdin https://gcr.io

jobs:
  go_lint:
    executor: docker_minio
    steps:
      - install_base
      - checkout
      - restore_cache:
          keys:
           - pkg-cache-{{ checksum "go.sum" }}
           - pkg-cache-
      - install_tools
      - run:
          name: Run golang linter
          command: |
            hack/go-generate.sh
            go mod download
            golangci-lint run
      - run:
          name: Lint shell scripts
          command: |
            shellcheck hack/fuse-demo/wrap_application.sh
      - run:
          name: Ensure metrics
          command: |
            go build -o datamon.metrics ./cmd/metrics

  go_test:
    executor: docker_minio
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    steps:
      - install_base
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - install_tools
      - login_to_google
      - run:
          name: Run golang tests
          command: |
            mkdir -p ~/extra
            mkdir -p /tmp/test-results
            echo $GCLOUD_SERVICE_KEY > ~/extra/appcredentials.json
            export GOOGLE_APPLICATION_CREDENTIALS=$HOME/extra/appcredentials.json
            hack/go-generate.sh
            go mod download
            # cafs tests are memory intensive: best to run them separately
            gotestsum --junitfile /tmp/test-results/go-test-report.xml --format short-with-failures -- \
              -race -coverprofile=c_non_cafs.out $(go list ./...|grep -v cafs)
              # cafs testing: trade parallelism for memory on limited CI config + race turned off
            gotestsum --junitfile /tmp/test-results/go-test-report-cafs.xml --format short-with-failures -- \
              -parallel 4 -coverprofile=c_cafs_only.out ./pkg/cafs/...
            # collect coverage metrics
            mkdir -p /tmp/test-coverage
            go tool cover -html=c_non_cafs.out -o coverage_non_cafs.html
            go tool cover -html=c_cafs_only.out -o coverage_cafs_only.html
            mv coverage_non_cafs.html coverage_cafs_only.html \
              /tmp/test-coverage
      - save_cache:
          key: pkg-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg"
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_artifacts:
          path: /tmp/test-coverage
          destination: coverage-report
      - store_test_results:
          path: /tmp/test-results

  go_test_fuse:
    executor: fuse_tester
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    steps:
      - install_base
      - install_machine
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - install_tools
      - login_to_google
      - run:
          name: Run golang tests in integration environment
          command: |
            export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
            mkdir -p ~/extra
            mkdir -p /tmp/test-fuse-results
            echo $GCLOUD_SERVICE_KEY > ~/extra/appcredentials.json
            export GOOGLE_APPLICATION_CREDENTIALS=$HOME/extra/appcredentials.json
            hack/go-generate.sh
            go mod download
            # make install-minio
            env
            gotestsum --junitfile /tmp/test-fuse-results/go-test-report.xml --format standard-verbose -- \
            -tags fuse_cli,fsintegration -run Mount  ./pkg/core ./cmd/datamon/cmd -timeout 20m
      - save_cache:
          key: pkg-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg"
      - store_artifacts:
          path: /tmp/test-fuse-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-fuse-results

  fuse_sidecar_test:
    executor: docker_builder
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - install_base
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - login_to_google
      - install_kubectl
      - run:
          name: Run fuse sidecar demo
          command: |
            make build-datamon-local
            mkdir -p ~/extra
            echo $GCLOUD_SERVICE_KEY > ~/extra/appcredentials.json
            export GOOGLE_APPLICATION_CREDENTIALS=$HOME/extra/appcredentials.json
            DATAMON_GLOBAL_CONFIG=datamon-config-test-sdjfhga ./cmd/datamon/datamon config create
            hack/fuse-demo/demo_coord.sh -b

  build_images:
    executor: docker_builder
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - install_base
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - login_to_google
      - run:
          name: Build datamon image (local registry)
          command: |
            make build-datamon
      - run:
          name: Build datamon fuse sidecar image
          command: |
            make build-and-push-fuse-sidecar
      - run:
          name: Build datamon pg sidecar image
          command: |
            make build-and-push-pg-sidecar
      - run:
          name: Build datamon datamover image
          command: |
            make build-and-push-datamover

  build_demo_images:
    executor: docker_builder
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - install_base
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - login_to_google
      - run:
          name: DEMO - Build datamon fuse demo image
          command: |
            make fuse-demo-build-shell
      - run:
          name: DEMO - Build datamon fuse demo sidecar
          command: |
            make fuse-demo-build-sidecar
      - run:
          name: DEMO - Build datamon fuse demo app
          command: |
            make fuse-demo-coord-build-app
      - run:
          name: DEMO - Build datamon fuse demo datamon
          command: |
            make fuse-demo-coord-build-datamon
      - run:
          name: DEMO - Build datamon pg demo app
          command: |
            make pg-demo-coord-build-app

  publish_release:
    executor: docker_builder
    # TODO(frederic):
    # - acquire GITHUB_TOKEN for onecrobot to push to homebrew-datamon repo
    #
    # > goreleaser needs access to github API, not only the git repo.
    # > Hence ssh key is not sufficient and GITHUB_TOKEN is required.
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - install_base
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - login_to_google
      - run:
          name: Prepare github release
          command: |
            #PATH=${PATH}:/usr/local/go/bin:${GOPATH}/bin
            PATH=${PATH}:${GOPATH}/bin
            opts="--debug"
            # self-installing goreleaser
            curl -sL https://git.io/goreleaser > ${GOPATH}/bin/goreleaser
            chmod u+x ${GOPATH}/bin/goreleaser
            release_notes="./notes/NOTES.${CIRCLE_TAG}.md"
            if [[ -n "${CIRCLE_TAG}" && -f ${RELEASE_NOTES} ]] ; then
              # use custom release notes
              echo "Adding release notes ${release_notes}"
              opts="${opts} --release-notes ${release_notes}"
            else
              # otherwise, leaves standard changelog from goreleaser
              # (picks up all commits)
              echo "No release notes provided: standard changelog applies"
            fi
            if [[ -z "${CIRCLE_TAG}" ]] ; then
              echo "No tag defined for this commit. goleaser will fail [test purpose]"
            fi
            echo "Preparing release ${CIRCLE_TAG}"
            goreleaser ${opts} 2>&1

workflows:
  version: 2
  build_and_test:
    jobs:
      - go_lint:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - go_test:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - go_test_fuse:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - fuse_sidecar_test:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - build_images:
          context: "OC Common"
          requires:
            - go_lint
            - go_test
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - build_demo_images:
          context: "OC Common"
          requires:
            - go_lint
            - go_test
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - publish_release:
          context: "OC Common"
          requires:
            - go_lint
            - go_test
            - build_images
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

